// Package gen contains all the components for code generation.
package gen

const filtererTmpl = `
// Code generated by 'gen/eventhandlergen.go'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'gen/filterergen_template.go' for more details
// File was generated at {{.GenTime}}
package {{.PackageName}}

import (
    log "github.com/golang/glog"
    "fmt"

    "github.com/ethereum/go-ethereum/accounts/abi/bind"
    "github.com/ethereum/go-ethereum/common"

    "github.com/joincivil/civil-events-crawler/pkg/model"
{{if .ContractImportPath -}}
    "{{.ContractImportPath}}"
{{- end}}
{{if .AdditionalImports -}}
{{- range .AdditionalImports}}
    "{{.}}"
{{- end}}
{{- end}}
)

{{if .EventHandlers -}}
var eventNames{{.ContractTypeName}} = []string{
    {{- range .EventHandlers}}
        "{{.EventMethod}}",
    {{- end}}
}
{{- end}}

func New{{.ContractTypeName}}Filterers(contractAddress common.Address) *{{.ContractTypeName}}Filterers {
    var c {{.ContractTypeName}}Filterers
    c.contractAddress = contractAddress
    c.eventNames = eventNames{{.ContractTypeName}}
    c.eventToStartBlock = make(map[string]uint64)
    for _, eventName := range c.eventNames {
        c.eventToStartBlock[eventName] = 0
    }
    return &c
}

type {{.ContractTypeName}}Filterers struct {
	contractAddress common.Address
	contract *{{.ContractTypePackage}}.{{.ContractTypeName}}
    eventNames []string
    eventToStartBlock map[string]uint64
}

func (f *{{.ContractTypeName}}Filterers) ContractName() string {
    return "{{.ContractTypeName}}"
}

func (f *{{.ContractTypeName}}Filterers) StartFilterers(client bind.ContractBackend, pastEvents *[]model.CivilEvent) error {
    return f.Start{{.ContractTypeName}}Filterers(client, pastEvents)
}

func (f *{{.ContractTypeName}}Filterers) EventNames() []string {
    return f.eventNames
}

func (f *{{.ContractTypeName}}Filterers) UpdateStartBlock(eventName string, startBlock int) {
    f.eventToStartBlock[eventName] = uint64(startBlock)
}

// Start{{.ContractTypeName}}Filterers retrieves events for {{.ContractTypeName}}
func (f *{{.ContractTypeName}}Filterers) Start{{.ContractTypeName}}Filterers(client bind.ContractBackend, pastEvents *[]model.CivilEvent) error {
    contract, err := {{.ContractTypePackage}}.New{{.ContractTypeName}}(f.contractAddress, client)
    if err != nil {
        log.Errorf("Error initializing Start{{.ContractTypeName}}: err: %v", err)
        return err
    }
	f.contract = contract
    var startBlock uint64
{{if .EventHandlers -}}
{{- range .EventHandlers}}
    startBlock = f.eventToStartBlock["{{.EventMethod}}"]
    err = f.startFilter{{.EventMethod}}(startBlock, pastEvents)
    if err != nil {
        return fmt.Errorf("Error retrieving {{.EventMethod}}: err: %v", err)
    }


{{- end}}
{{- end}}

    return nil
}

{{if .EventHandlers -}}
{{- range .EventHandlers}}

func (f *{{$.ContractTypeName}}Filterers) startFilter{{.EventMethod}}(startBlock uint64, pastEvents *[]model.CivilEvent) error {
    var opts = &bind.FilterOpts{
        Start: startBlock,
    }
    itr, err := f.contract.Filter{{.EventMethod}}(
        opts,
    {{- if .ParamValues -}}
    {{range .ParamValues}}
        []{{.Type}}{},
    {{- end}}
    {{end}}
    )
    if err != nil {
        log.Errorf("Error getting event {{.EventMethod}}: %v", err)
        return err
    }
    nextEvent := itr.Next()
    for nextEvent {
        civilEvent := model.NewCivilEvent("{{.EventMethod}}", f.contractAddress, itr.Event)
        *pastEvents = append(*pastEvents, *civilEvent)
        nextEvent = itr.Next()
    }
    return nil
}

{{- end}}
{{- end}}
`
