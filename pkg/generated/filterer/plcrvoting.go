// Code generated by 'gen/eventhandlergen.go'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'gen/filterergen_template.go' for more details
// File was generated at 2018-10-11 16:18:57.534246372 +0000 UTC
package filterer

import (
	log "github.com/golang/glog"
	"runtime"
	"sync"

	"github.com/Jeffail/tunny"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	commongen "github.com/joincivil/civil-events-crawler/pkg/generated/common"
	"github.com/joincivil/civil-events-crawler/pkg/generated/contract"
	"github.com/joincivil/civil-events-crawler/pkg/model"
	"github.com/joincivil/civil-events-crawler/pkg/utils"

	"math/big"
)

func NewPLCRVotingContractFilterers(contractAddress common.Address) *PLCRVotingContractFilterers {
	contractFilterers := &PLCRVotingContractFilterers{
		contractAddress:   contractAddress,
		eventTypes:        commongen.EventTypesPLCRVotingContract(),
		eventToStartBlock: make(map[string]uint64),
		lastEvents:        make([]*model.Event, 0),
	}
	for _, eventType := range contractFilterers.eventTypes {
		contractFilterers.eventToStartBlock[eventType] = 0
	}
	return contractFilterers
}

type PLCRVotingContractFilterers struct {
	contractAddress   common.Address
	contract          *contract.PLCRVotingContract
	eventTypes        []string
	eventToStartBlock map[string]uint64
	lastEvents        []*model.Event
	lastEventsMutex   sync.Mutex
	pastEventsMutex   sync.Mutex
}

func (f *PLCRVotingContractFilterers) ContractName() string {
	return "PLCRVotingContract"
}

func (f *PLCRVotingContractFilterers) ContractAddress() common.Address {
	return f.contractAddress
}

func (f *PLCRVotingContractFilterers) StartFilterers(client bind.ContractBackend, pastEvents []*model.Event) (error, []*model.Event) {
	return f.StartPLCRVotingContractFilterers(client, pastEvents)
}

func (f *PLCRVotingContractFilterers) EventTypes() []string {
	return f.eventTypes
}

func (f *PLCRVotingContractFilterers) UpdateStartBlock(eventType string, startBlock uint64) {
	f.eventToStartBlock[eventType] = startBlock
}

func (f *PLCRVotingContractFilterers) LastEvents() []*model.Event {
	return f.lastEvents
}

// StartPLCRVotingContractFilterers retrieves events for PLCRVotingContract
func (f *PLCRVotingContractFilterers) StartPLCRVotingContractFilterers(client bind.ContractBackend, pastEvents []*model.Event) (error, []*model.Event) {
	contract, err := contract.NewPLCRVotingContract(f.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartPLCRVotingContract: err: %v", err)
		return err, pastEvents
	}
	f.contract = contract

	workerMultiplier := 1
	numWorkers := runtime.NumCPU() * workerMultiplier
	log.Infof("Num of workers: %v", numWorkers)
	pool := tunny.NewFunc(numWorkers, func(payload interface{}) interface{} {
		f := payload.(func())
		f()
		return nil
	})
	defer pool.Close()

	wg := sync.WaitGroup{}
	resultsChan := make(chan []*model.Event)
	done := make(chan bool)

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["PollCreated"]
			e, pevents := f.startFilterPollCreated(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving PollCreated: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["TokensRescued"]
			e, pevents := f.startFilterTokensRescued(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving TokensRescued: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["VoteCommitted"]
			e, pevents := f.startFilterVoteCommitted(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving VoteCommitted: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["VoteRevealed"]
			e, pevents := f.startFilterVoteRevealed(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving VoteRevealed: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["VotingRightsGranted"]
			e, pevents := f.startFilterVotingRightsGranted(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving VotingRightsGranted: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		filterFunc := func() {
			startBlock := f.eventToStartBlock["VotingRightsWithdrawn"]
			e, pevents := f.startFilterVotingRightsWithdrawn(startBlock, []*model.Event{})
			if e != nil {
				log.Errorf("Error retrieving VotingRightsWithdrawn: err: %v", e)
				return
			}
			if len(pevents) > 0 {
				f.lastEventsMutex.Lock()
				f.lastEvents = append(f.lastEvents, pevents[len(pevents)-1])
				f.lastEventsMutex.Unlock()
				resultsChan <- pevents
			}
		}
		pool.Process(filterFunc)
		wg.Done()
	}()

	go func() {
		wg.Wait()
		done <- true
		log.Info("Filtering routines complete")
	}()

Loop:
	for {
		select {
		case <-done:
			break Loop
		case pevents := <-resultsChan:
			f.pastEventsMutex.Lock()
			pastEvents = append(pastEvents, pevents...)
			f.pastEventsMutex.Unlock()
		}
	}
	log.Infof("Total events found: %v", len(pastEvents))
	return nil, pastEvents
}

func (f *PLCRVotingContractFilterers) startFilterPollCreated(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for PollCreated for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	itr, err := f.contract.FilterPollCreated(
		opts,
		[]*big.Int{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event PollCreated: %v", err)
		return err, pastEvents
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("PollCreated", f.ContractName(), f.contractAddress, itr.Event, utils.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("PollCreated events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *PLCRVotingContractFilterers) startFilterTokensRescued(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for TokensRescued for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	itr, err := f.contract.FilterTokensRescued(
		opts,
		[]*big.Int{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event TokensRescued: %v", err)
		return err, pastEvents
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("TokensRescued", f.ContractName(), f.contractAddress, itr.Event, utils.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("TokensRescued events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *PLCRVotingContractFilterers) startFilterVoteCommitted(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for VoteCommitted for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	itr, err := f.contract.FilterVoteCommitted(
		opts,
		[]*big.Int{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event VoteCommitted: %v", err)
		return err, pastEvents
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("VoteCommitted", f.ContractName(), f.contractAddress, itr.Event, utils.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("VoteCommitted events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *PLCRVotingContractFilterers) startFilterVoteRevealed(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for VoteRevealed for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	itr, err := f.contract.FilterVoteRevealed(
		opts,
		[]*big.Int{},
		[]*big.Int{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event VoteRevealed: %v", err)
		return err, pastEvents
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("VoteRevealed", f.ContractName(), f.contractAddress, itr.Event, utils.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("VoteRevealed events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *PLCRVotingContractFilterers) startFilterVotingRightsGranted(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for VotingRightsGranted for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	itr, err := f.contract.FilterVotingRightsGranted(
		opts,
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event VotingRightsGranted: %v", err)
		return err, pastEvents
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("VotingRightsGranted", f.ContractName(), f.contractAddress, itr.Event, utils.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("VotingRightsGranted events added: %v", numEventsAdded)
	return nil, pastEvents
}

func (f *PLCRVotingContractFilterers) startFilterVotingRightsWithdrawn(startBlock uint64, pastEvents []*model.Event) (error, []*model.Event) {
	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	log.Infof("Filtering events for VotingRightsWithdrawn for contract %v starting at block %v", f.contractAddress.Hex(), startBlock)
	itr, err := f.contract.FilterVotingRightsWithdrawn(
		opts,
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event VotingRightsWithdrawn: %v", err)
		return err, pastEvents
	}
	beforeCount := len(pastEvents)
	nextEvent := itr.Next()
	for nextEvent {
		modelEvent, err := model.NewEventFromContractEvent("VotingRightsWithdrawn", f.ContractName(), f.contractAddress, itr.Event, utils.CurrentEpochSecsInInt64(), model.Filterer)
		if err != nil {
			log.Errorf("Error creating new event: event: %v, err: %v", itr.Event, err)
			continue
		}
		pastEvents = append(pastEvents, modelEvent)
		nextEvent = itr.Next()
	}
	numEventsAdded := len(pastEvents) - beforeCount
	log.Infof("VotingRightsWithdrawn events added: %v", numEventsAdded)
	return nil, pastEvents
}
