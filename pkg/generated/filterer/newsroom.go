// Code generated by 'gen/watchergen'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'listener/watchergen' for more details
// File was generated at 2018-06-10 05:20:30.229060146 +0000 UTC
package filterer

import (
	"fmt"
	log "github.com/golang/glog"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	"github.com/joincivil/civil-events-crawler/pkg/generated/contract"
	"github.com/joincivil/civil-events-crawler/pkg/model"

	"math/big"
)

func NewNewsroomContractFilterers(contractAddress common.Address) *NewsroomContractFilterers {
	return &NewsroomContractFilterers{
		contractAddress: contractAddress,
	}
}

type NewsroomContractFilterers struct {
	contractAddress common.Address
	contract        *contract.NewsroomContract
}

func (r *NewsroomContractFilterers) ContractName() string {
	return "NewsroomContract"
}

func (r *NewsroomContractFilterers) StartFilterers(client bind.ContractBackend,
	pastEvents *[]model.CivilEvent, startBlock uint64) error {
	return r.StartNewsroomContractFilterers(client, pastEvents, startBlock)
}

// StartNewsroomContractFilterers retrieves events for NewsroomContract
func (r *NewsroomContractFilterers) StartNewsroomContractFilterers(client bind.ContractBackend,
	pastEvents *[]model.CivilEvent, startBlock uint64) error {
	contract, err := contract.NewNewsroomContract(r.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartNewsroomContract: err: %v", err)
		return err
	}
	r.contract = contract

	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	err = r.startFilterContentPublished(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving ContentPublished: err: %v", err)
	}

	err = r.startFilterNameChanged(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving NameChanged: err: %v", err)
	}

	err = r.startFilterOwnershipTransferred(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving OwnershipTransferred: err: %v", err)
	}

	err = r.startFilterRevisionSigned(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RevisionSigned: err: %v", err)
	}

	err = r.startFilterRevisionUpdated(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RevisionUpdated: err: %v", err)
	}

	err = r.startFilterRoleAdded(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RoleAdded: err: %v", err)
	}

	err = r.startFilterRoleRemoved(opts, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RoleRemoved: err: %v", err)
	}

	return nil
}

func (r *NewsroomContractFilterers) startFilterContentPublished(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterContentPublished(
		opts,
		[]common.Address{},
		[]*big.Int{},
	)
	if err != nil {
		log.Errorf("Error getting event ContentPublished: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("ContentPublished", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func (r *NewsroomContractFilterers) startFilterNameChanged(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterNameChanged(
		opts,
	)
	if err != nil {
		log.Errorf("Error getting event NameChanged: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("NameChanged", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func (r *NewsroomContractFilterers) startFilterOwnershipTransferred(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterOwnershipTransferred(
		opts,
		[]common.Address{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event OwnershipTransferred: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("OwnershipTransferred", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func (r *NewsroomContractFilterers) startFilterRevisionSigned(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterRevisionSigned(
		opts,
		[]*big.Int{},
		[]*big.Int{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event RevisionSigned: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RevisionSigned", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func (r *NewsroomContractFilterers) startFilterRevisionUpdated(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterRevisionUpdated(
		opts,
		[]common.Address{},
		[]*big.Int{},
		[]*big.Int{},
	)
	if err != nil {
		log.Errorf("Error getting event RevisionUpdated: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RevisionUpdated", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func (r *NewsroomContractFilterers) startFilterRoleAdded(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterRoleAdded(
		opts,
		[]common.Address{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event RoleAdded: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RoleAdded", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func (r *NewsroomContractFilterers) startFilterRoleRemoved(opts *bind.FilterOpts, pastEvents *[]model.CivilEvent) error {
	itr, err := r.contract.FilterRoleRemoved(
		opts,
		[]common.Address{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event RoleRemoved: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RoleRemoved", r.contractAddress, itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}
