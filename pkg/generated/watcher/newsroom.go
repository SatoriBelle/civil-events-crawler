// Code generated by 'gen/watchergen'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'listener/watchergen' for more details
// File was generated at 2019-03-14 14:59:40.227547 +0000 UTC
package watcher

import (
	"fmt"
	"github.com/davecgh/go-spew/spew"
	log "github.com/golang/glog"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"

	"github.com/joincivil/civil-events-crawler/pkg/model"

	"github.com/joincivil/go-common/pkg/generated/contract"
	ctime "github.com/joincivil/go-common/pkg/time"

	"math/big"
)

func NewNewsroomContractWatchers(contractAddress common.Address) *NewsroomContractWatchers {
	return &NewsroomContractWatchers{
		contractAddress: contractAddress,
	}
}

type NewsroomContractWatchers struct {
	errors          chan error
	contractAddress common.Address
	contract        *contract.NewsroomContract
	activeSubs      []event.Subscription
}

func (w *NewsroomContractWatchers) ContractAddress() common.Address {
	return w.contractAddress
}

func (w *NewsroomContractWatchers) ContractName() string {
	return "NewsroomContract"
}

func (w *NewsroomContractWatchers) StopWatchers(unsub bool) error {
	if unsub {
		for _, sub := range w.activeSubs {
			sub.Unsubscribe()
		}
	}
	w.activeSubs = nil
	return nil
}

func (w *NewsroomContractWatchers) StartWatchers(client bind.ContractBackend,
	eventRecvChan chan *model.Event, errs chan error) ([]event.Subscription, error) {
	return w.StartNewsroomContractWatchers(client, eventRecvChan, errs)
}

// StartNewsroomContractWatchers starts up the event watchers for NewsroomContract
func (w *NewsroomContractWatchers) StartNewsroomContractWatchers(client bind.ContractBackend,
	eventRecvChan chan *model.Event, errs chan error) ([]event.Subscription, error) {
	w.errors = errs
	contract, err := contract.NewNewsroomContract(w.contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartNewsroomContract: err: %v", err)
		return nil, err
	}
	w.contract = contract

	var sub event.Subscription
	subs := []event.Subscription{}

	sub, err = w.startWatchContentPublished(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startContentPublished: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchNameChanged(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startNameChanged: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchOwnershipRenounced(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startOwnershipRenounced: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchOwnershipTransferred(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startOwnershipTransferred: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchRevisionSigned(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startRevisionSigned: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchRevisionUpdated(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startRevisionUpdated: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchRoleAdded(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startRoleAdded: err: %v", err)
	}
	subs = append(subs, sub)

	sub, err = w.startWatchRoleRemoved(eventRecvChan)
	if err != nil {
		return nil, fmt.Errorf("Error starting startRoleRemoved: err: %v", err)
	}
	subs = append(subs, sub)

	w.activeSubs = subs
	return subs, nil
}

func (w *NewsroomContractWatchers) startWatchContentPublished(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractContentPublished, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractContentPublished)
				log.Infof("startupFn: Starting WatchContentPublished")
				sub, err := w.contract.WatchContentPublished(
					opts,
					recvChan,
					[]common.Address{},
					[]*big.Int{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchContentPublished")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchContentPublished started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchContentPublished: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchContentPublished for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of ContentPublished")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting ContentPublished: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old ContentPublished")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart ContentPublished")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchContentPublished: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchContentPublished")
				}
				modelEvent, err := model.NewEventFromContractEvent("ContentPublished", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchContentPublished: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchContentPublished")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchContentPublished, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchContentPublished (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchContentPublished, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchContentPublished")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchNameChanged(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractNameChanged, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractNameChanged)
				log.Infof("startupFn: Starting WatchNameChanged")
				sub, err := w.contract.WatchNameChanged(
					opts,
					recvChan,
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchNameChanged")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchNameChanged started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchNameChanged: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchNameChanged for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of NameChanged")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting NameChanged: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old NameChanged")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart NameChanged")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchNameChanged: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchNameChanged")
				}
				modelEvent, err := model.NewEventFromContractEvent("NameChanged", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchNameChanged: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchNameChanged")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchNameChanged, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchNameChanged (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchNameChanged, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchNameChanged")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchOwnershipRenounced(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractOwnershipRenounced, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractOwnershipRenounced)
				log.Infof("startupFn: Starting WatchOwnershipRenounced")
				sub, err := w.contract.WatchOwnershipRenounced(
					opts,
					recvChan,
					[]common.Address{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchOwnershipRenounced")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchOwnershipRenounced started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchOwnershipRenounced: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchOwnershipRenounced for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of OwnershipRenounced")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting OwnershipRenounced: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old OwnershipRenounced")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart OwnershipRenounced")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchOwnershipRenounced: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchOwnershipRenounced")
				}
				modelEvent, err := model.NewEventFromContractEvent("OwnershipRenounced", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchOwnershipRenounced: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchOwnershipRenounced")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchOwnershipRenounced, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchOwnershipRenounced (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchOwnershipRenounced, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchOwnershipRenounced")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchOwnershipTransferred(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractOwnershipTransferred, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractOwnershipTransferred)
				log.Infof("startupFn: Starting WatchOwnershipTransferred")
				sub, err := w.contract.WatchOwnershipTransferred(
					opts,
					recvChan,
					[]common.Address{},
					[]common.Address{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchOwnershipTransferred")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchOwnershipTransferred started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchOwnershipTransferred: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchOwnershipTransferred for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of OwnershipTransferred")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting OwnershipTransferred: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old OwnershipTransferred")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart OwnershipTransferred")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchOwnershipTransferred: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchOwnershipTransferred")
				}
				modelEvent, err := model.NewEventFromContractEvent("OwnershipTransferred", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchOwnershipTransferred: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchOwnershipTransferred")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchOwnershipTransferred, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchOwnershipTransferred (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchOwnershipTransferred, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchOwnershipTransferred")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchRevisionSigned(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractRevisionSigned, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractRevisionSigned)
				log.Infof("startupFn: Starting WatchRevisionSigned")
				sub, err := w.contract.WatchRevisionSigned(
					opts,
					recvChan,
					[]*big.Int{},
					[]*big.Int{},
					[]common.Address{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchRevisionSigned")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchRevisionSigned started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchRevisionSigned: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchRevisionSigned for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of RevisionSigned")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting RevisionSigned: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old RevisionSigned")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart RevisionSigned")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchRevisionSigned: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchRevisionSigned")
				}
				modelEvent, err := model.NewEventFromContractEvent("RevisionSigned", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchRevisionSigned: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchRevisionSigned")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchRevisionSigned, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchRevisionSigned (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchRevisionSigned, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchRevisionSigned")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchRevisionUpdated(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractRevisionUpdated, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractRevisionUpdated)
				log.Infof("startupFn: Starting WatchRevisionUpdated")
				sub, err := w.contract.WatchRevisionUpdated(
					opts,
					recvChan,
					[]common.Address{},
					[]*big.Int{},
					[]*big.Int{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchRevisionUpdated")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchRevisionUpdated started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchRevisionUpdated: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchRevisionUpdated for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of RevisionUpdated")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting RevisionUpdated: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old RevisionUpdated")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart RevisionUpdated")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchRevisionUpdated: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchRevisionUpdated")
				}
				modelEvent, err := model.NewEventFromContractEvent("RevisionUpdated", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchRevisionUpdated: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchRevisionUpdated")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchRevisionUpdated, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchRevisionUpdated (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchRevisionUpdated, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchRevisionUpdated")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchRoleAdded(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractRoleAdded, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractRoleAdded)
				log.Infof("startupFn: Starting WatchRoleAdded")
				sub, err := w.contract.WatchRoleAdded(
					opts,
					recvChan,
					[]common.Address{},
					[]common.Address{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchRoleAdded")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchRoleAdded started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchRoleAdded: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchRoleAdded for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of RoleAdded")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting RoleAdded: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old RoleAdded")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart RoleAdded")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchRoleAdded: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchRoleAdded")
				}
				modelEvent, err := model.NewEventFromContractEvent("RoleAdded", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchRoleAdded: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchRoleAdded")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchRoleAdded, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchRoleAdded (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchRoleAdded, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchRoleAdded")
				return nil
			}
		}
	}), nil
}

func (w *NewsroomContractWatchers) startWatchRoleRemoved(eventRecvChan chan *model.Event) (event.Subscription, error) {
	return event.NewSubscription(func(quit <-chan struct{}) error {
		startupFn := func() (event.Subscription, chan *contract.NewsroomContractRoleRemoved, error) {
			for {
				opts := &bind.WatchOpts{}
				recvChan := make(chan *contract.NewsroomContractRoleRemoved)
				log.Infof("startupFn: Starting WatchRoleRemoved")
				sub, err := w.contract.WatchRoleRemoved(
					opts,
					recvChan,
					[]common.Address{},
					[]common.Address{},
				)
				if err != nil {
					if sub != nil {
						log.Infof("startupFn: Unsubscribing WatchRoleRemoved")
						sub.Unsubscribe()
					}
					return nil, nil, err
				}
				log.Infof("startupFn: WatchRoleRemoved started")
				return sub, recvChan, nil
			}
		}
		sub, recvChan, err := startupFn()
		if err != nil {
			log.Errorf("Error starting WatchRoleRemoved: %v", err)
			if sub != nil {
				sub.Unsubscribe()
			}
			w.errors <- err
			return err
		}
		defer sub.Unsubscribe()
		log.Infof("Starting up WatchRoleRemoved for contract %v", w.contractAddress.Hex())
		for {
			select {
			// 15 min premptive resubscribe
			case <-time.After(time.Second * time.Duration(60*15)):
				log.Infof("Premptive restart of RoleRemoved")
				oldSub := sub
				sub, recvChan, err = startupFn()
				if err != nil {
					log.Errorf("Error starting RoleRemoved: %v", err)
					w.errors <- err
					return err
				}
				log.Infof("Attempting to unsub old RoleRemoved")
				oldSub.Unsubscribe()
				log.Infof("Done preemptive restart RoleRemoved")
			case event := <-recvChan:
				if log.V(2) {
					log.Infof("Received event on WatchRoleRemoved: %v", spew.Sprintf("%#+v", event))
				} else {
					log.Info("Received event on WatchRoleRemoved")
				}
				modelEvent, err := model.NewEventFromContractEvent("RoleRemoved", w.ContractName(), w.contractAddress, event, ctime.CurrentEpochSecsInInt64(), model.Watcher)
				if err != nil {
					log.Errorf("Error creating new event: event: %v, err: %v", event, err)
					continue
				}
				select {
				case eventRecvChan <- modelEvent:
					if log.V(2) {
						log.Infof("Sent event to eventRecvChan on WatchRoleRemoved: %v", spew.Sprintf("%#+v", event))
					} else {
						log.Info("Sent event to eventRecvChan on WatchRoleRemoved")
					}
				case err := <-sub.Err():
					log.Errorf("Error with WatchRoleRemoved, fatal (a): %v", err)
					w.errors <- err
					return err
				case <-quit:
					log.Infof("Quit WatchRoleRemoved (a): %v", err)
					return nil
				}
			case err := <-sub.Err():
				log.Errorf("Error with WatchRoleRemoved, fatal (b): %v", err)
				w.errors <- err
				return err
			case <-quit:
				log.Infof("Quitting loop for WatchRoleRemoved")
				return nil
			}
		}
	}), nil
}
