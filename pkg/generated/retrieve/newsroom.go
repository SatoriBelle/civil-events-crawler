// Code generated by 'gen/watchergen'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// Please reference 'listener/watchergen' for more details
// File was generated at 2018-06-07 16:00:05.086337986 +0000 UTC
package retrieve

import (
	"fmt"
	log "github.com/golang/glog"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"

	"github.com/joincivil/civil-events-crawler/pkg/generated/contract"
	"github.com/joincivil/civil-events-crawler/pkg/model"

	"math/big"
)

// RetrieveNewsroomContractEvents retrieves events for NewsroomContract
func RetrieveNewsroomContractEvents(client bind.ContractBackend, contractAddress common.Address, pastEvents *[]model.CivilEvent, startBlock uint64) error {
	contract, err := contract.NewNewsroomContract(contractAddress, client)
	if err != nil {
		log.Errorf("Error initializing StartNewsroomContract: err: %v", err)
		return err
	}

	var opts = &bind.FilterOpts{
		Start: startBlock,
	}

	err = RetrieveRoleRemoved(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RoleRemoved: err: %v", err)
	}

	err = RetrieveOwnershipTransferred(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving OwnershipTransferred: err: %v", err)
	}

	err = RetrieveContentPublished(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving ContentPublished: err: %v", err)
	}

	err = RetrieveRevisionSigned(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RevisionSigned: err: %v", err)
	}

	err = RetrieveRevisionUpdated(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RevisionUpdated: err: %v", err)
	}

	err = RetrieveNameChanged(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving NameChanged: err: %v", err)
	}

	err = RetrieveRoleAdded(opts, contract, pastEvents)
	if err != nil {
		return fmt.Errorf("Error retrieving RoleAdded: err: %v", err)
	}

	return nil
}

func RetrieveRoleRemoved(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterRoleRemoved(
		opts,
		[]common.Address{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event RoleRemoved: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RoleRemoved", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func RetrieveOwnershipTransferred(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterOwnershipTransferred(
		opts,
		[]common.Address{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event OwnershipTransferred: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("OwnershipTransferred", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func RetrieveContentPublished(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterContentPublished(
		opts,
		[]common.Address{},
		[]*big.Int{},
	)
	if err != nil {
		log.Errorf("Error getting event ContentPublished: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("ContentPublished", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func RetrieveRevisionSigned(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterRevisionSigned(
		opts,
		[]*big.Int{},
		[]*big.Int{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event RevisionSigned: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RevisionSigned", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func RetrieveRevisionUpdated(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterRevisionUpdated(
		opts,
		[]common.Address{},
		[]*big.Int{},
		[]*big.Int{},
	)
	if err != nil {
		log.Errorf("Error getting event RevisionUpdated: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RevisionUpdated", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func RetrieveNameChanged(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterNameChanged(
		opts,
	)
	if err != nil {
		log.Errorf("Error getting event NameChanged: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("NameChanged", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}

func RetrieveRoleAdded(opts *bind.FilterOpts, _contract *contract.NewsroomContract, pastEvents *[]model.CivilEvent) error {
	itr, err := _contract.FilterRoleAdded(
		opts,
		[]common.Address{},
		[]common.Address{},
	)
	if err != nil {
		log.Errorf("Error getting event RoleAdded: %v", err)
		return err
	}
	nextEvent := itr.Next()
	for nextEvent {
		civilEvent := model.NewCivilEvent("RoleAdded", itr.Event)
		*pastEvents = append(*pastEvents, *civilEvent)
		nextEvent = itr.Next()
	}
	return nil
}
